from fastapi import FastAPI, Request, Form
from pydantic import BaseModel
import os, requests, json
from typing import Optional

app = FastAPI(title="Action Server (demo)")

class GenerateRequest(BaseModel):
    text: str
    lang: Optional[str] = "en"
    context: Optional[dict] = None

@app.post("/generate")
def generate(req: GenerateRequest):
    """Generate reply using Gemini (if configured) or simulated reply."""
    gemini_url = os.getenv("GEMINI_API_URL")
    gemini_key = os.getenv("GEMINI_API_KEY")
    prompt = f"User ({req.lang}): {req.text}\n\nProvide a concise, safety-first health guidance. Cite sources if applicable."
    if gemini_url and gemini_key:
        try:
            r = requests.post(gemini_url, headers={"Authorization": f"Bearer {gemini_key}"}, json={"prompt": prompt, "max_tokens": 200}, timeout=20)
            try:
                data = r.json()
                text = data.get("text") or data.get("output") or str(data)
            except Exception:
                text = r.text
            return {"reply": text}
        except Exception as e:
            return {"reply": f"(Gemini call failed) Demo reply: I understood '{req.text}'. ({e})"}
    simulated = f"Demo reply (simulated): For '{req.text}' consider: keep hydrated, check temperature, and visit nearest health center if symptoms worsen.\n(Reply generated by Action Server)"
    return {"reply": simulated}

@app.post("/translate")
def translate(text: str = Form(...), target: str = Form(...)):
    """Basic wrapper over Google Translate REST API (v2). Requires GOOGLE_TRANSLATE_KEY environment variable."""
    api_key = os.getenv("GOOGLE_TRANSLATE_KEY")
    if api_key:
        url = "https://translation.googleapis.com/language/translate/v2"
        payload = {"q": text, "target": target, "key": api_key}
        r = requests.post(url, data=payload, timeout=10)
        try:
            data = r.json()
            translated = data["data"]["translations"][0]["translatedText"]
            return {"translatedText": translated}
        except Exception as e:
            return {"translatedText": text + " (translation failed)"}
    return {"translatedText": text + " (simulated translation)"}

@app.get("/mock-gov/{district}")
def mock_gov(district: str):
    """Return demo government data for a district."""
    demo = {
        "district": district,
        "outbreaks": [
            {"disease": "Dengue", "date": "2025-09-10", "advisory": "Remove standing water, use nets"}
        ],
        "vaccines": [
            {"name": "Polio", "next_date": "2025-09-20", "location": "PHC Example"}
        ]
    }
    return demo

@app.post("/webhook")
async def twilio_webhook(request: Request):
    """Endpoint to receive incoming messages from Twilio (WhatsApp/SMS). For demo, it echoes and calls Rasa or returns a simulated reply."""
    form = await request.form()
    body = form.get('Body') or form.get('body') or ''
    from_number = form.get('From') or form.get('from') or 'unknown'
    print(f"Incoming from {from_number}: {body}")
    resp = requests.post(f"http://localhost:8000/generate", json={"text": body, "lang": "en"}, timeout=10)
    reply = resp.json().get('reply', 'Sorry')
    tw_sid = os.getenv('TWILIO_ACCOUNT_SID')
    tw_token = os.getenv('TWILIO_AUTH_TOKEN')
    tw_from = os.getenv('TWILIO_WHATSAPP_NUMBER')
    if tw_sid and tw_token and tw_from:
        twilio_url = f"https://api.twilio.com/2010-04-01/Accounts/{tw_sid}/Messages.json"
        data = {'From': tw_from, 'To': from_number, 'Body': reply}
        try:
            r = requests.post(twilio_url, data=data, auth=(tw_sid, tw_token), timeout=10)
            print('Twilio send status', r.status_code)
        except Exception as e:
            print('Twilio send failed', e)
    return {"status": "ok", "reply": reply}

@app.post("/send-alert")
def send_alert(district: str = Form(...), message: str = Form(...)):
    """Demo: send an alert to all opted-in users in that district (simulation).
    In production, query DB for opted-in users and call Twilio API to broadcast.
    """
    return {"status": "ok", "district": district, "message": message}
